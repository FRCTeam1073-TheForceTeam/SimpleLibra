/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */




#include "DriveTrain.h"
#include "../Robotmap.h"
#include "../Commands/Drive.h"
DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	rightFront = RobotMap::driveTrainrightFront;
	rightBack = RobotMap::driveTrainrightBack;
	leftFront = RobotMap::driveTrainleftFront;
	leftBack = RobotMap::driveTrainleftBack;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	mecanumOrTank = true;
}
    
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Drive());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
#define TWIST_CONSTANT 0.8f;
void DriveTrain::MecanumDrive(float x, float y, float twist) {
	double joyAngle = atan2(x, y);
	float joystickMagnitude = sqrt((x * x) + (y * y));
	if(twist < 0.05 && twist  > -0.05){
		twist = 0.0;
	}
	float ccTwist = twist * TWIST_CONSTANT;
	float newtwist = -twist * TWIST_CONSTANT;
	double actAngle = joyAngle; 
	
	float leftFrontVal = -1 * (ccTwist + joystickMagnitude*(cos(actAngle)+sin(actAngle)));
	float rightFrontVal = (newtwist + joystickMagnitude*(cos(actAngle)-sin(actAngle)));
	float leftBackVal= -1 * (ccTwist + joystickMagnitude*(cos(actAngle)-sin(actAngle)));
	float rightBackVal = (newtwist + joystickMagnitude*(cos(actAngle)+sin(actAngle)));
	leftFront->Set(leftFrontVal);
	rightFront->Set(rightFrontVal);
	leftBack->Set(leftBackVal);
	rightBack->Set(rightBackVal);
}

void DriveTrain::AracdeDrive(float left, float right) {
	rightFront->Set(right);
	rightBack->Set(right);
	leftFront->Set(left);
	leftBack->Set(left);
}

void DriveTrain::SetMecanumMode() {mecanumOrTank = true;}
void DriveTrain::SetTankMode() { mecanumOrTank = false;}
bool DriveTrain::IsMecanumMode() { return mecanumOrTank; }
